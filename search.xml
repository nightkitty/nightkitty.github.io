<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>闲人勿入</title>
      <link href="/2019/02/03/%E9%97%B2%E4%BA%BA%E8%AF%AF%E5%85%A5/"/>
      <url>/2019/02/03/%E9%97%B2%E4%BA%BA%E8%AF%AF%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>密码是我的名字，中文<br>老姜happy new year！！！！！！！！！！！！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test.md</title>
      <link href="/2019/02/03/test-md/"/>
      <url>/2019/02/03/test-md/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my first blob with hexo</title>
      <link href="/2019/02/02/my-first-blob-with-hexo/"/>
      <url>/2019/02/02/my-first-blob-with-hexo/</url>
      
        <content type="html"><![CDATA[<p>date: 2019-02-02 23:33:55</p><h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p><strong> types(类型)</strong><br><strong> operators(运算符)</strong><br><strong> expressions(表达式)</strong></p><p>数据对象<code>data objects</code>分常量<code>constants</code> 和变量<code>variables</code></p><p>声明语句<code>declarations</code> 声明data的type</p><p>符号常量 <code>symbolic constants</code></p><h2 id="1-变量命名规则"><a href="#1-变量命名规则" class="headerlink" title="1.变量命名规则"></a>1.变量命名规则</h2><a id="more"></a><p>变量只能通过大写upper字母、小写lower字母、数字digits、<em>组成，并且变量首位必须为字母letters，插句话</em>被看作letters<br>共识：下划线underscore,_用于库文件,upper case 用于symbolic constant ,lower case 用于variable</p><h2 id="2-Data-types-and-Sizes"><a href="#2-Data-types-and-Sizes" class="headerlink" title="2.Data types and Sizes"></a>2.Data types and Sizes</h2><p>限定符<code>qualifiers</code></p><table><thead><tr><th>qualifiers</th><th>char</th><th>int</th><th>float</th><th>double </th></tr></thead><tbody><tr><td>short/long</td><td></td><td>O</td></tr><tr><td>signed/unsigned</td><td>O</td><td>O</td></tr></tbody></table><h1 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h1><p>编写一个程序以确定分别由signed及unsigned限定的char、short、int与long类型变量的取值范围。采用打印标准头文件中的相应值以及直接计算两种方式实现。(后一种方法的实现较困难一些，因为要确定各种浮点类型的取值范围)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*方案一*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="comment">/* determine range of types */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/* signed types*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed char min = %d\n"</span>,SCHAR_MIN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed char max = %d\n"</span>,SCHAR_MAX);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed short min = %d\n"</span>,SHRT_MIN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed short max = %d\n"</span>,SHRT_MAX);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed int min = %d\n"</span>,INT_MIN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed int max = %d\n"</span>,INT_MAX);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed long min = %ld\n"</span>,LONG_MIN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed long max = %ld\n"</span>,LONG_MAX);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* unsigned types*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"unsigned char max = %u\n"</span>,UCHAR_MAX);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"unsigned short max = %u\n"</span>,USHRT_MAX);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"unsigned int max = %u\n"</span>,UINT_MAX);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"unsigned long max = %lu\n"</span>,ULONG_MAX);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>signed char min = -128<br>signed char max = 127<br>signed short min = -32768<br>signed short max = 32767<br>signed int min = -2147483648<br>signed int max = 2147483647<br>signed long min = -9223372036854775808<br>signed long max = 9223372036854775807<br>unsigned char max = 255<br>unsigned short max = 65535<br>unsigned int max = 4294967295<br>unsigned long max = 18446744073709551615</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*方案二*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/*determine ranges of types*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*signed types*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed char min = %d\n"</span>,</span><br><span class="line">-(<span class="keyword">char</span>)((<span class="keyword">unsigned</span> <span class="keyword">char</span>) ~<span class="number">0</span> &gt;&gt; <span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed char max = %d\n"</span>,</span><br><span class="line">(<span class="keyword">char</span>)((<span class="keyword">unsigned</span> <span class="keyword">char</span>) ~<span class="number">0</span> &gt;&gt; <span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed short min = %d\n"</span>,</span><br><span class="line">-(<span class="keyword">short</span>)((<span class="keyword">unsigned</span> <span class="keyword">short</span>) ~<span class="number">0</span> &gt;&gt; <span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed short max = %d\n"</span>,</span><br><span class="line">(<span class="keyword">short</span>)((<span class="keyword">unsigned</span> <span class="keyword">short</span>) ~<span class="number">0</span> &gt;&gt; <span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed int min = %d\n"</span>,</span><br><span class="line">-(<span class="keyword">int</span>)((<span class="keyword">unsigned</span> <span class="keyword">int</span>) ~<span class="number">0</span> &gt;&gt; <span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed int max = %d\n"</span>,</span><br><span class="line">(<span class="keyword">int</span>)((<span class="keyword">unsigned</span> <span class="keyword">int</span>) ~<span class="number">0</span> &gt;&gt; <span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed long min = %ld\n"</span>,</span><br><span class="line">-(<span class="keyword">long</span>)((<span class="keyword">unsigned</span> <span class="keyword">long</span>) ~<span class="number">0</span> &gt;&gt; <span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"signed long max = %ld\n"</span>,</span><br><span class="line">(<span class="keyword">long</span>)((<span class="keyword">unsigned</span> <span class="keyword">long</span>) ~<span class="number">0</span> &gt;&gt; <span class="number">1</span>));</span><br><span class="line"><span class="comment">/*unsigned types*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"unsigned char max = %u\n"</span>,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">char</span>) ~<span class="number">0</span> );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"unsigned short max = %u\n"</span>,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">short</span>) ~<span class="number">0</span> );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"unsigned int max = %u\n"</span>,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">int</span>) ~<span class="number">0</span> );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"unsigned long max = %lu\n"</span>,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">long</span>) ~<span class="number">0</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>signed char min = -128<br>signed char max = 127<br>signed short min = -32768<br>signed short max = 32767<br>signed int min = -2147483648<br>signed int max = 2147483647<br>signed long min = -9223372036854775808<br>signed long max = 9223372036854775807<br>unsigned char max = 255<br>unsigned short max = 65535<br>unsigned int max = 4294967295<br>unsigned long max = 18446744073709551615</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><h2 id="2-3-常量Constants"><a href="#2-3-常量Constants" class="headerlink" title="2.3 常量Constants"></a>2.3 常量<code>Constants</code></h2><p style="text-indent:2em"><br>类似1234的<code>integer constants</code>属于<code>int</code>类型。<code>long</code>类型的<code>integer constants</code>常以<code>l</code>或<code>L</code>结尾，如123456789L。如果一个<code>integer</code>太大以至于无法用<code>int</code>类型表示时，也被当作<code>long</code>类型处理。<code>unsigned constants</code>常以字母<code>u</code>，<code>U</code>结尾。后缀<code>ul</code>或<code>UL</code>表明是<code>unsigned long</code>类型。<br></p><br><p style="text-indent:2em"><br><code>floating-point constants</code>如1.234或1e-2，两者都有也可。没有后缀的浮点数为<code>double</code>类型，后缀<code>f</code>或<code>F</code>表示<code>float</code>类型，后缀<code>l</code>或<code>L</code>表示<code>long double</code>类型<br></p><table><thead><tr><th><code>integer</code></th><th><code>octal</code></th><th><code>decimal</code></th><th><code>hexadecimal</code> </th></tr></thead><tbody><tr><td><code>prefix</code></td><td><code>0</code></td><td></td><td><code>0x</code>或<code>0X</code></td></tr></tbody></table><ul><li><code>integer</code>适用<code>long</code>/<code>unsigned long</code>)的<code>L</code>和<code>UL</code>的<code>suffix</code><br><p style="text-indent:2em"><br><code>character constant</code>是integer，书写时要添加’’，每个<code>character constant</code>都按照不同的字符集对应一个具体的<code>value</code>，可以相互比较，也可参与<code>numeric operations</code>。<br></p><br><p style="text-indent:2em"><br>某些<code>characters</code>可以通过转义字符序列(<code>escape sequences</code>)表示为<code>character constants</code>或<code>string constants</code>。比如’\n’<br></p><br>举个粒子：标准ASCII共8个二进制数组合而成，因为首项必须为0(首项为1的称为扩展ASCII码)，因此可以代表128种字符。</li></ul><p><code>\ooo</code>值的是3个八进制数的组合，<code>\xhh</code>中的<code>hh</code>指的是2个十六进制数的组合</p><table><thead><tr><th></th><th><code>escape sequences</code></th><th><code>\ooo</code></th><th><code>\xhh</code> </th></tr></thead><tbody><tr><td>纵向制表符<code>vertical tab</code></td><td><code>\v</code></td><td><code>\013</code></td><td><code>\xb</code></td></tr><tr><td>响铃符<code>alert character</code></td><td><code>\a</code></td><td><code>\007</code></td><td><code>\x7</code></td></tr></tbody></table><ul><li><strong>常量表达式</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define MALINE 1000</span><br><span class="line">char line[MAXLINE+1];</span><br><span class="line"></span><br><span class="line">#define LEAP 1/*闰年*/</span><br><span class="line">int days[31+28+LEAP+31+30+31+30+31+31+30+31+30+31];</span><br></pre></td></tr></table></figure><p>从技术角度看，<code>string constants</code>就是<code>an array of characters</code>，不同的是<code>string constangs</code>内部使用<code>\0</code>作为它的结尾。标准库函数strlen(s)可以返回字符串参数s的长度，但不包括结尾的<code>\0</code>。</p><ul><li><strong>设计的<code>strlen</code>函数的一个版本</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\*strlen函数：返回s的长度*\</span><br><span class="line">int strlen(char s[])</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line"></span><br><span class="line">i=0;</span><br><span class="line">while(s[i] != &apos;\0&apos;)</span><br><span class="line">++i;</span><br><span class="line">return i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong> 辨析:<code>&#39;x&#39;</code>和<code>&quot;x&quot;</code>前者是一个整数，它的值是字母<code>x</code>在机器字符集种对应的数，而后者是包含<code>character</code>(<code>letter x</code>)并且以<code>\0</code>结尾的字符数组<code>an array of characters</code> </strong></p><ul><li>枚举常量是另外一种类型的常量。枚举是一个常量整形值的列表，</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\*没有显式说明的情况下，`enum`类型中第一枚举名的值为0，第二个为1，依次类推。*\</span><br><span class="line">enum boolean &#123;NO, YES&#125;;</span><br><span class="line">enum escapes &#123;ALERT = &apos;\a&apos;, BACKSPACE = &apos;\b&apos;, TAB = &apos;\t&apos;,</span><br><span class="line">NEWLINE = &apos;\n&apos;, VTAB = &apos;\v&apos;, RETURN = &apos;\r&apos; &#125;;</span><br><span class="line"></span><br><span class="line">\*只指定了部分枚举名的值，那么未指定值的枚举名的值将依着最后一个指定值向后递增。*\</span><br><span class="line">enum months &#123;JAN = 1, FEB, MAR, APR, MAY, JUN,</span><br><span class="line">JUL, AUG, SEP, OCT, NOV, DEC &#125;;</span><br></pre></td></tr></table></figure><p><code>#define</code>和<code>enum</code>对常量的适用各有优劣。</p><h2 id="2-4-声明Declarations"><a href="#2-4-声明Declarations" class="headerlink" title="2.4 声明Declarations"></a>2.4 声明<code>Declarations</code></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a = <span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/02/hello-world/"/>
      <url>/2019/02/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
